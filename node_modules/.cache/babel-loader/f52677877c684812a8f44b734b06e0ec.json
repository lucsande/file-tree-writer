{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props; // const horPipe = \"─\";\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = parentNode => {\n    const parentNodeEntries = Object.entries(parentNode); // const children = parentNodeEntries.filter(child => {\n    //   console.log(parentNode)\n    //   console.log(child)\n    //   console.log(child[1])\n    //   console.log('--------------------------------')\n    //   if (child[0] !== \"_name\") return child[1];\n    // });\n\n    const children = parentNodeEntries.map(entry => {\n      const entryName = entry[0];\n      const child = entry[1];\n      if (entryName !== \"_name\") return child;\n    });\n    return children;\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n    if (children.length === 0) return childrenLines;\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n      const childInfos = {\n        treeNode,\n        isLastChild,\n        parentWasLastChild,\n        inheritedPrefix\n      };\n      childrenLines += writeLines(childInfos);\n    });\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    // get writeLines parameters with default values\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\"; // write node line\n\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\"; // write children lines if node really has children\n\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n    return childrenLines + nodeLine;\n  };\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, writeLines({\n    treeNode: fileTree\n  })));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","FileTreeContainer","FileTree","props","fileTree","blank","iPipe","tPipe","lPipe","getNodeChildren","parentNode","parentNodeEntries","Object","entries","children","map","entry","entryName","child","writeChildrenLines","parentWasLastChild","prefixToBestow","childrenLines","length","forEach","index","treeNode","isLastChild","inheritedPrefix","childInfos","writeLines","nodeInfos","pipeOrBlank","tpipeOrLpipe","nodeLine","_name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n\n  // const horPipe = \"─\";\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = parentNode => {\n    const parentNodeEntries = Object.entries(parentNode);\n    // const children = parentNodeEntries.filter(child => {\n    //   console.log(parentNode)\n    //   console.log(child)\n    //   console.log(child[1])\n    //   console.log('--------------------------------')\n    //   if (child[0] !== \"_name\") return child[1];\n    // });\n    const children = parentNodeEntries.map(entry => {\n      const entryName = entry[0]\n      const child = entry[1]\n      if(entryName !== \"_name\") return child;\n    });\n\n    return children;\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n\n    if (children.length === 0) return childrenLines;\n\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n\n      const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n      childrenLines += writeLines(childInfos);\n    });\n\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    // get writeLines parameters with default values\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    // write node line\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n\n    // write children lines if node really has children\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n    return childrenLines + nodeLine;\n  };\n\n  return (\n    <FileTreeContainer>\n      <code>{writeLines({ treeNode: fileTree })}</code>\n      {/* <code>{JSON.stringify(fileTree)}</code> */}\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}