{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props; // const horPipe = \"─\";\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeLines = treeNodeInfos => {\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n    const pipeOrBlank = parenWasLastChild ? blank : pipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n    let childrenLines = \"\";\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    treeNode.entries.forEach((entry, index) => {\n      const key = entry[0];\n      const child = entry[1];\n\n      if (key !== \"_name\") {\n        childrenLines = writeLines();\n      }\n    });\n    return childrenLines + nodeLine;\n  };\n\n  const writeLine = (treeNode, col = 0) => {};\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, JSON.stringify(fileTree)));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","FileTreeContainer","FileTree","props","fileTree","blank","iPipe","tPipe","lPipe","writeLines","treeNodeInfos","treeNode","isLastChild","parentWasLastChild","inheritedPrefix","pipeOrBlank","parenWasLastChild","pipe","tpipeOrLpipe","nodeLine","_name","childrenLines","prefixToBestow","entries","forEach","entry","index","key","child","writeLine","col","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,UAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CADuB,CAGvB;;AACA,QAAME,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;;AAEA,QAAMC,UAAU,GAAGC,aAAa,IAAI;AAClC,QAAI;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBC,MAAAA,kBAAzB;AAA6CC,MAAAA;AAA7C,QAAiEJ,aAArE;AACAE,IAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7B;AACAC,IAAAA,kBAAkB,GAAGA,kBAAkB,IAAI,IAA3C;AACAC,IAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC;AAEA,UAAMC,WAAW,GAAGC,iBAAiB,GAAGX,KAAH,GAAWY,IAAhD;AACA,UAAMC,YAAY,GAAGN,WAAW,GAAGJ,KAAH,GAAWD,KAA3C;AACA,UAAMY,QAAQ,GAAG,QAAQL,eAAR,GAA0BC,WAA1B,GAAwCG,YAAxC,GAAuDP,QAAQ,CAACS,KAAhE,GAAwE,MAAzF;AACA,QAAIC,aAAa,GAAG,EAApB;AACA,UAAMC,cAAc,GAAGR,eAAe,GAAGC,WAAzC;AAEAJ,IAAAA,QAAQ,CAACY,OAAT,CAAiBC,OAAjB,CAAyB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,YAAMC,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAjB;AACA,YAAMG,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAnB;;AAEA,UAAIE,GAAG,KAAK,OAAZ,EAAqB;AACnBN,QAAAA,aAAa,GAAGZ,UAAU,EAA1B;AACD;AACF,KAPD;AASA,WAAOY,aAAa,GAAGF,QAAvB;AACD,GAtBD;;AAwBA,QAAMU,SAAS,GAAG,CAAClB,QAAD,EAAWmB,GAAG,GAAG,CAAjB,KAAuB,CAAE,CAA3C;;AAEA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,IAAI,CAACC,SAAL,CAAe5B,QAAf,CAAP,CADF,CADF;AAKD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n\n  // const horPipe = \"─\";\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeLines = treeNodeInfos => {\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    const pipeOrBlank = parenWasLastChild ? blank : pipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n    let childrenLines = \"\";\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n\n    treeNode.entries.forEach((entry, index) => {\n      const key = entry[0];\n      const child = entry[1];\n\n      if (key !== \"_name\") {\n        childrenLines = writeLines();\n      }\n    });\n\n    return childrenLines + nodeLine;\n  };\n\n  const writeLine = (treeNode, col = 0) => {};\n\n  return (\n    <FileTreeContainer>\n      <code>{JSON.stringify(fileTree)}</code>\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}