{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props;\n  const [lines, setLines] = useState([]);\n  useEffect(() => {\n    const linesString = writeLines({\n      treeNode: fileTree\n    });\n    setLines(linesString.split('!separator!'));\n  }, [fileTree]);\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = parentNode => {\n    const parentNodeEntries = Object.entries(parentNode);\n    const children = parentNodeEntries.map(entry => {\n      const entryName = entry[0];\n      const child = entry[1];\n      if (entryName !== \"_name\") return child;\n    });\n    return children.filter(child => child !== undefined);\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n    console.log(children);\n    if (children.length === 0) return childrenLines;\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n      const childInfos = {\n        treeNode,\n        isLastChild,\n        parentWasLastChild,\n        inheritedPrefix\n      };\n      childrenLines += writeLines(childInfos);\n    });\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    // get writeLines parameters with default values\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\"; // write node line\n\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\"; // write children lines if node really has children\n\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n    return nodeLine + childrenLines;\n  };\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, lines.map(line => /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, line))));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","useEffect","FileTreeContainer","FileTree","props","fileTree","lines","setLines","linesString","writeLines","treeNode","split","blank","iPipe","tPipe","lPipe","getNodeChildren","parentNode","parentNodeEntries","Object","entries","children","map","entry","entryName","child","filter","undefined","writeChildrenLines","parentWasLastChild","prefixToBestow","childrenLines","console","log","length","forEach","index","isLastChild","inheritedPrefix","childInfos","nodeInfos","pipeOrBlank","tpipeOrLpipe","nodeLine","_name","line"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n  const [lines, setLines] = useState([])\n  \n  useEffect(() => {\n    const linesString = writeLines({ treeNode: fileTree })\n    setLines(linesString.split('!separator!')) \n  }, [fileTree])\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = parentNode => {\n    const parentNodeEntries = Object.entries(parentNode);\n    const children = parentNodeEntries.map(entry => {\n      const entryName = entry[0]\n      const child = entry[1]\n      if(entryName !== \"_name\") return child;\n    });\n\n    return children.filter((child) => child !== undefined);\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n    console.log(children)\n\n    if (children.length === 0) return childrenLines;\n\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n\n      const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n      childrenLines += writeLines(childInfos);\n    });\n\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    // get writeLines parameters with default values\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    // write node line\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\";\n\n    // write children lines if node really has children\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n    return nodeLine + childrenLines;\n  };\n\n  return (\n    <FileTreeContainer>\n      <code>\n        {lines.map((line) => (\n          <pre>{line}</pre>\n        ))}\n      </code>\n      {/* <code>{JSON.stringify(fileTree)}</code> */}\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}