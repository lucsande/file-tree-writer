{"ast":null,"code":"const blank = \"    \";\nconst iPipe = \" |  \";\nconst tPipe = \" ├──\";\nconst lPipe = \" └──\";\n\nconst getNodeChildren = parentNode => {\n  const parentNodeEntries = Object.entries(parentNode);\n  const children = parentNodeEntries.map(entry => {\n    const entryName = entry[0];\n    const child = entry[1];\n    if (entryName !== \"_name\") return child;\n  });\n  return children.filter(child => child !== undefined);\n};\n\nconst writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n  const children = getNodeChildren(parentNode);\n  let childrenLines = \"\";\n  console.log(children);\n  if (children.length === 0) return childrenLines;\n  children.forEach((child, index) => {\n    const treeNode = child;\n    const isLastChild = index === children.length - 1;\n    const inheritedPrefix = prefixToBestow;\n    const childInfos = {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    };\n    childrenLines += writeLines(childInfos);\n  });\n  return childrenLines;\n};\n\nconst writeLines = nodeInfos => {\n  let {\n    treeNode,\n    isLastChild,\n    parentWasLastChild,\n    inheritedPrefix\n  } = nodeInfos;\n  let pipeOrBlank = parentWasLastChild ? blank : iPipe;\n  let tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n  let prefixToBestow = inheritedPrefix + pipeOrBlank;\n  let nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\";\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  return nodeLine + childrenLines;\n};\n\nexport const writeFileTree = fileTree => {\n  const isLastChild = true;\n  const prefixToBestow = \"\";\n  const treeNode = fileTree;\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  const projectRootLine = blank + treeNode._name + \"!separator!\";\n  return projectRootLine + childrenLines;\n};","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/utils/fileTreeWriter.js"],"names":["blank","iPipe","tPipe","lPipe","getNodeChildren","parentNode","parentNodeEntries","Object","entries","children","map","entry","entryName","child","filter","undefined","writeChildrenLines","parentWasLastChild","prefixToBestow","childrenLines","console","log","length","forEach","index","treeNode","isLastChild","inheritedPrefix","childInfos","writeLines","nodeInfos","pipeOrBlank","tpipeOrLpipe","nodeLine","_name","writeFileTree","fileTree","projectRootLine"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;;AAEA,MAAMC,eAAe,GAAGC,UAAU,IAAI;AACpC,QAAMC,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeH,UAAf,CAA1B;AACA,QAAMI,QAAQ,GAAGH,iBAAiB,CAACI,GAAlB,CAAsBC,KAAK,IAAI;AAC9C,UAAMC,SAAS,GAAGD,KAAK,CAAC,CAAD,CAAvB;AACA,UAAME,KAAK,GAAGF,KAAK,CAAC,CAAD,CAAnB;AACA,QAAIC,SAAS,KAAK,OAAlB,EAA2B,OAAOC,KAAP;AAC5B,GAJgB,CAAjB;AAMA,SAAOJ,QAAQ,CAACK,MAAT,CAAgBD,KAAK,IAAIA,KAAK,KAAKE,SAAnC,CAAP;AACD,CATD;;AAWA,MAAMC,kBAAkB,GAAG,CAACX,UAAD,EAAaY,kBAAb,EAAiCC,cAAjC,KAAoD;AAC7E,QAAMT,QAAQ,GAAGL,eAAe,CAACC,UAAD,CAAhC;AACA,MAAIc,aAAa,GAAG,EAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AAEA,MAAIA,QAAQ,CAACa,MAAT,KAAoB,CAAxB,EAA2B,OAAOH,aAAP;AAE3BV,EAAAA,QAAQ,CAACc,OAAT,CAAiB,CAACV,KAAD,EAAQW,KAAR,KAAkB;AACjC,UAAMC,QAAQ,GAAGZ,KAAjB;AACA,UAAMa,WAAW,GAAGF,KAAK,KAAKf,QAAQ,CAACa,MAAT,GAAkB,CAAhD;AACA,UAAMK,eAAe,GAAGT,cAAxB;AAEA,UAAMU,UAAU,GAAG;AAAEH,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBT,MAAAA,kBAAzB;AAA6CU,MAAAA;AAA7C,KAAnB;AACAR,IAAAA,aAAa,IAAIU,UAAU,CAACD,UAAD,CAA3B;AACD,GAPD;AASA,SAAOT,aAAP;AACD,CAjBD;;AAmBA,MAAMU,UAAU,GAAGC,SAAS,IAAI;AAC9B,MAAI;AAAEL,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBT,IAAAA,kBAAzB;AAA6CU,IAAAA;AAA7C,MAAiEG,SAArE;AAEA,MAAIC,WAAW,GAAGd,kBAAkB,GAAGjB,KAAH,GAAWC,KAA/C;AACA,MAAI+B,YAAY,GAAGN,WAAW,GAAGvB,KAAH,GAAWD,KAAzC;AACA,MAAIgB,cAAc,GAAGS,eAAe,GAAGI,WAAvC;AAEA,MAAIE,QAAQ,GAAGN,eAAe,GAAGI,WAAlB,GAAgCC,YAAhC,GAA+CP,QAAQ,CAACS,KAAxD,GAAgE,aAA/E;AAEA,QAAMf,aAAa,GAAGH,kBAAkB,CAACS,QAAD,EAAWC,WAAX,EAAwBR,cAAxB,CAAxC;AACA,SAAOe,QAAQ,GAAGd,aAAlB;AACD,CAXD;;AAaA,OAAO,MAAMgB,aAAa,GAAGC,QAAQ,IAAI;AACvC,QAAMV,WAAW,GAAG,IAApB;AACA,QAAMR,cAAc,GAAG,EAAvB;AACA,QAAMO,QAAQ,GAAGW,QAAjB;AACA,QAAMjB,aAAa,GAAGH,kBAAkB,CAACS,QAAD,EAAWC,WAAX,EAAwBR,cAAxB,CAAxC;AAEA,QAAMmB,eAAe,GAAGrC,KAAK,GAAGyB,QAAQ,CAACS,KAAjB,GAAyB,aAAjD;AACA,SAAOG,eAAe,GAAGlB,aAAzB;AACD,CARM","sourcesContent":["const blank = \"    \";\nconst iPipe = \" |  \";\nconst tPipe = \" ├──\";\nconst lPipe = \" └──\";\n\nconst getNodeChildren = parentNode => {\n  const parentNodeEntries = Object.entries(parentNode);\n  const children = parentNodeEntries.map(entry => {\n    const entryName = entry[0];\n    const child = entry[1];\n    if (entryName !== \"_name\") return child;\n  });\n\n  return children.filter(child => child !== undefined);\n};\n\nconst writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n  const children = getNodeChildren(parentNode);\n  let childrenLines = \"\";\n  console.log(children);\n\n  if (children.length === 0) return childrenLines;\n\n  children.forEach((child, index) => {\n    const treeNode = child;\n    const isLastChild = index === children.length - 1;\n    const inheritedPrefix = prefixToBestow;\n\n    const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n    childrenLines += writeLines(childInfos);\n  });\n\n  return childrenLines;\n};\n\nconst writeLines = nodeInfos => {\n  let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = nodeInfos;\n\n  let pipeOrBlank = parentWasLastChild ? blank : iPipe;\n  let tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n  let prefixToBestow = inheritedPrefix + pipeOrBlank;\n\n  let nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\";\n\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  return nodeLine + childrenLines;\n};\n\nexport const writeFileTree = fileTree => {\n  const isLastChild = true;\n  const prefixToBestow = \"\";\n  const treeNode = fileTree;\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n  const projectRootLine = blank + treeNode._name + \"!separator!\";\n  return projectRootLine + childrenLines;\n};\n"]},"metadata":{},"sourceType":"module"}