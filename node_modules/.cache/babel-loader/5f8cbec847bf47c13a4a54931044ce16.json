{"ast":null,"code":"const blank = \"    \";\nconst iPipe = \" |  \";\nconst tPipe = \" ├──\";\nconst lPipe = \" └──\";\nexport const writeFileTree = fileTree => {\n  const isLastChild = true;\n  const prefixToBestow = \"\";\n  const treeNode = fileTree;\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  const projectRootLine = blank + treeNode._name + \"!separator!\";\n  return projectRootLine + childrenLines;\n};\n\nconst writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n  const children = getNodeChildren(parentNode);\n  let childrenLines = \"\";\n  if (children.length === 0) return childrenLines;\n  children.forEach((child, index) => {\n    const treeNode = child;\n    const isLastChild = index === children.length - 1;\n    const inheritedPrefix = prefixToBestow;\n    const childInfos = {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    };\n    childrenLines += writeLines(childInfos);\n  });\n  return childrenLines;\n};\n\nconst getNodeChildren = parentNode => {\n  const parentNodeEntries = Object.entries(parentNode);\n  const children = parentNodeEntries.map(entry => {\n    const entryName = entry[0];\n    const child = entry[1];\n    if (entryName !== \"_name\") return child;\n  });\n  return children.filter(child => child !== undefined);\n};\n\nconst writeLines = nodeInfos => {\n  let {\n    treeNode,\n    isLastChild,\n    parentWasLastChild,\n    inheritedPrefix\n  } = nodeInfos;\n  let pipeOrBlank = parentWasLastChild ? blank : iPipe;\n  let tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n  let prefixToBestow = inheritedPrefix + pipeOrBlank;\n  let nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\";\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  return nodeLine + childrenLines;\n};","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/utils/fileTreeWriter.js"],"names":["blank","iPipe","tPipe","lPipe","writeFileTree","fileTree","isLastChild","prefixToBestow","treeNode","childrenLines","writeChildrenLines","projectRootLine","_name","parentNode","parentWasLastChild","children","getNodeChildren","length","forEach","child","index","inheritedPrefix","childInfos","writeLines","parentNodeEntries","Object","entries","map","entry","entryName","filter","undefined","nodeInfos","pipeOrBlank","tpipeOrLpipe","nodeLine"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;AACA,MAAMC,KAAK,GAAG,MAAd;AAEA,OAAO,MAAMC,aAAa,GAAGC,QAAQ,IAAI;AACvC,QAAMC,WAAW,GAAG,IAApB;AACA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,QAAQ,GAAGH,QAAjB;AACA,QAAMI,aAAa,GAAGC,kBAAkB,CAACF,QAAD,EAAWF,WAAX,EAAwBC,cAAxB,CAAxC;AAEA,QAAMI,eAAe,GAAGX,KAAK,GAAGQ,QAAQ,CAACI,KAAjB,GAAyB,aAAjD;AACA,SAAOD,eAAe,GAAGF,aAAzB;AACD,CARM;;AAUP,MAAMC,kBAAkB,GAAG,CAACG,UAAD,EAAaC,kBAAb,EAAiCP,cAAjC,KAAoD;AAC7E,QAAMQ,QAAQ,GAAGC,eAAe,CAACH,UAAD,CAAhC;AACA,MAAIJ,aAAa,GAAG,EAApB;AAEA,MAAIM,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B,OAAOR,aAAP;AAE3BM,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,UAAMZ,QAAQ,GAAGW,KAAjB;AACA,UAAMb,WAAW,GAAGc,KAAK,KAAKL,QAAQ,CAACE,MAAT,GAAkB,CAAhD;AACA,UAAMI,eAAe,GAAGd,cAAxB;AAEA,UAAMe,UAAU,GAAG;AAAEd,MAAAA,QAAF;AAAYF,MAAAA,WAAZ;AAAyBQ,MAAAA,kBAAzB;AAA6CO,MAAAA;AAA7C,KAAnB;AACAZ,IAAAA,aAAa,IAAIc,UAAU,CAACD,UAAD,CAA3B;AACD,GAPD;AASA,SAAOb,aAAP;AACD,CAhBD;;AAkBA,MAAMO,eAAe,GAAGH,UAAU,IAAI;AACpC,QAAMW,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeb,UAAf,CAA1B;AACA,QAAME,QAAQ,GAAGS,iBAAiB,CAACG,GAAlB,CAAsBC,KAAK,IAAI;AAC9C,UAAMC,SAAS,GAAGD,KAAK,CAAC,CAAD,CAAvB;AACA,UAAMT,KAAK,GAAGS,KAAK,CAAC,CAAD,CAAnB;AACA,QAAIC,SAAS,KAAK,OAAlB,EAA2B,OAAOV,KAAP;AAC5B,GAJgB,CAAjB;AAMA,SAAOJ,QAAQ,CAACe,MAAT,CAAgBX,KAAK,IAAIA,KAAK,KAAKY,SAAnC,CAAP;AACD,CATD;;AAWA,MAAMR,UAAU,GAAGS,SAAS,IAAI;AAC9B,MAAI;AAAExB,IAAAA,QAAF;AAAYF,IAAAA,WAAZ;AAAyBQ,IAAAA,kBAAzB;AAA6CO,IAAAA;AAA7C,MAAiEW,SAArE;AAEA,MAAIC,WAAW,GAAGnB,kBAAkB,GAAGd,KAAH,GAAWC,KAA/C;AACA,MAAIiC,YAAY,GAAG5B,WAAW,GAAGH,KAAH,GAAWD,KAAzC;AACA,MAAIK,cAAc,GAAGc,eAAe,GAAGY,WAAvC;AAEA,MAAIE,QAAQ,GAAGd,eAAe,GAAGY,WAAlB,GAAgCC,YAAhC,GAA+C1B,QAAQ,CAACI,KAAxD,GAAgE,aAA/E;AAEA,QAAMH,aAAa,GAAGC,kBAAkB,CAACF,QAAD,EAAWF,WAAX,EAAwBC,cAAxB,CAAxC;AACA,SAAO4B,QAAQ,GAAG1B,aAAlB;AACD,CAXD","sourcesContent":["const blank = \"    \";\nconst iPipe = \" |  \";\nconst tPipe = \" ├──\";\nconst lPipe = \" └──\";\n\nexport const writeFileTree = fileTree => {\n  const isLastChild = true;\n  const prefixToBestow = \"\";\n  const treeNode = fileTree;\n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  \n  const projectRootLine = blank + treeNode._name + \"!separator!\";\n  return projectRootLine + childrenLines;\n};\n\nconst writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n  const children = getNodeChildren(parentNode);\n  let childrenLines = \"\";\n\n  if (children.length === 0) return childrenLines;\n\n  children.forEach((child, index) => {\n    const treeNode = child;\n    const isLastChild = index === children.length - 1;\n    const inheritedPrefix = prefixToBestow;\n\n    const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n    childrenLines += writeLines(childInfos);\n  });\n\n  return childrenLines;\n};\n\nconst getNodeChildren = parentNode => {\n  const parentNodeEntries = Object.entries(parentNode);\n  const children = parentNodeEntries.map(entry => {\n    const entryName = entry[0];\n    const child = entry[1];\n    if (entryName !== \"_name\") return child;\n  });\n\n  return children.filter(child => child !== undefined);\n};\n\nconst writeLines = nodeInfos => {\n  let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = nodeInfos;\n  \n  let pipeOrBlank = parentWasLastChild ? blank : iPipe;\n  let tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n  let prefixToBestow = inheritedPrefix + pipeOrBlank;\n  \n  let nodeLine = inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"!separator!\";\n  \n  const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n  return nodeLine + childrenLines;\n};"]},"metadata":{},"sourceType":"module"}