{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props; // const horPipe = \"─\";\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    let childrenLines = \"\";\n    const parentNodeEntries = parentNode.entries;\n    const children = parentNodeEntries.filter(child => child[0] !== \"_name\");\n    if (children.length === 0) return childrenLines;\n    children.forEach((child, index) => {\n      const treeNode = child[1];\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n      const childInfos = {\n        treeNode,\n        isLastChild,\n        parentWasLastChild,\n        inheritedPrefix\n      };\n      childrenLines += writeLines(childInfos);\n    });\n  };\n\n  const writeLines = treeNodeInfos => {\n    // get writeLines parameters with default values\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\"; // write node line\n\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\"; // write children lines if node really has children\n\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n    return childrenLines + nodeLine;\n  };\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, JSON.stringify(fileTree)));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","FileTreeContainer","FileTree","props","fileTree","blank","iPipe","tPipe","lPipe","writeChildrenLines","parentNode","parentWasLastChild","prefixToBestow","childrenLines","parentNodeEntries","entries","children","filter","child","length","forEach","index","treeNode","isLastChild","inheritedPrefix","childInfos","writeLines","treeNodeInfos","pipeOrBlank","tpipeOrLpipe","nodeLine","_name","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,UAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CADuB,CAGvB;;AACA,QAAME,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;;AAEA,QAAMC,kBAAkB,GAAG,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,cAAjC,KAAoD;AAC7E,QAAIC,aAAa,GAAG,EAApB;AACA,UAAMC,iBAAiB,GAAGJ,UAAU,CAACK,OAArC;AACA,UAAMC,QAAQ,GAAGF,iBAAiB,CAACG,MAAlB,CAAyBC,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,OAA/C,CAAjB;AAEA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B,OAAON,aAAP;AAE3BG,IAAAA,QAAQ,CAACI,OAAT,CAAiB,CAACF,KAAD,EAAQG,KAAR,KAAkB;AACjC,YAAMC,QAAQ,GAAGJ,KAAK,CAAC,CAAD,CAAtB;AACA,YAAMK,WAAW,GAAGF,KAAK,KAAKL,QAAQ,CAACG,MAAT,GAAkB,CAAhD;AACA,YAAMK,eAAe,GAAGZ,cAAxB;AAEA,YAAMa,UAAU,GAAG;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,WAAZ;AAAyBZ,QAAAA,kBAAzB;AAA6Ca,QAAAA;AAA7C,OAAnB;AACAX,MAAAA,aAAa,IAAIa,UAAU,CAACD,UAAD,CAA3B;AACD,KAPD;AAQD,GAfD;;AAiBA,QAAMC,UAAU,GAAGC,aAAa,IAAI;AAClC;AACA,QAAI;AAAEL,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBZ,MAAAA,kBAAzB;AAA6Ca,MAAAA;AAA7C,QAAiEG,aAArE;AACAJ,IAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7B;AACAZ,IAAAA,kBAAkB,GAAGA,kBAAkB,IAAI,IAA3C;AACAa,IAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC,CALkC,CAOlC;;AACA,UAAMI,WAAW,GAAGjB,kBAAkB,GAAGN,KAAH,GAAWC,KAAjD;AACA,UAAMuB,YAAY,GAAGN,WAAW,GAAGf,KAAH,GAAWD,KAA3C;AACA,UAAMuB,QAAQ,GAAG,QAAQN,eAAR,GAA0BI,WAA1B,GAAwCC,YAAxC,GAAuDP,QAAQ,CAACS,KAAhE,GAAwE,MAAzF,CAVkC,CAYlC;;AACA,UAAMnB,cAAc,GAAGY,eAAe,GAAGI,WAAzC;AACA,UAAMf,aAAa,GAAGJ,kBAAkB,CAACa,QAAD,EAAWC,WAAX,EAAwBX,cAAxB,CAAxC;AAEA,WAAOC,aAAa,GAAGiB,QAAvB;AACD,GAjBD;;AAmBA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAI,CAACC,SAAL,CAAe7B,QAAf,CAAP,CAFF,CADF;AAMD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n\n  // const horPipe = \"─\";\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    let childrenLines = \"\";\n    const parentNodeEntries = parentNode.entries;\n    const children = parentNodeEntries.filter(child => child[0] !== \"_name\");\n\n    if (children.length === 0) return childrenLines;\n\n    children.forEach((child, index) => {\n      const treeNode = child[1];\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n\n      const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n      childrenLines += writeLines(childInfos);\n    });\n  };\n\n  const writeLines = treeNodeInfos => {\n    // get writeLines parameters with default values\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    // write node line\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n\n    // write children lines if node really has children\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n    return childrenLines + nodeLine;\n  };\n\n  return (\n    <FileTreeContainer>\n      {/* <code>{writeLines(fileTree)}</code> */}\n      <code>{JSON.stringify(fileTree)}</code>\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}