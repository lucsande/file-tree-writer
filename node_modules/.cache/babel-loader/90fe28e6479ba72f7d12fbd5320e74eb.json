{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props; // const horPipe = \"─\";\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = node => {\n    const nodeEntries = node.entries;\n    const children = nodeEntries.filter(child => {\n      if (child[0] !== \"_name\") return child[1];\n    });\n    return children;\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n    if (children.length === 0) return childrenLines;\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n      const childInfos = {\n        treeNode,\n        isLastChild,\n        parentWasLastChild,\n        inheritedPrefix\n      };\n      childrenLines += writeLines(childInfos);\n    });\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    console.log(nodeInfos); // get writeLines parameters with default values\n\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\"; // write node line\n\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\"; // write children lines if node really has children\n\n    const prefixToBestow = inheritedPrefix + pipeOrBlank; // const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n    const childrenLines = '';\n    return childrenLines + nodeLine;\n  };\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, writeLines(fileTree)));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","FileTreeContainer","FileTree","props","fileTree","blank","iPipe","tPipe","lPipe","getNodeChildren","node","nodeEntries","entries","children","filter","child","writeChildrenLines","parentNode","parentWasLastChild","prefixToBestow","childrenLines","length","forEach","index","treeNode","isLastChild","inheritedPrefix","childInfos","writeLines","nodeInfos","console","log","pipeOrBlank","tpipeOrLpipe","nodeLine","_name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,UAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CADuB,CAGvB;;AACA,QAAME,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;;AAEA,QAAMC,eAAe,GAAGC,IAAI,IAAI;AAC9B,UAAMC,WAAW,GAAGD,IAAI,CAACE,OAAzB;AACA,UAAMC,QAAQ,GAAGF,WAAW,CAACG,MAAZ,CAAmBC,KAAK,IAAI;AAC3C,UAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B,OAAOA,KAAK,CAAC,CAAD,CAAZ;AAC3B,KAFgB,CAAjB;AAIA,WAAOF,QAAP;AACD,GAPD;;AASA,QAAMG,kBAAkB,GAAG,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,cAAjC,KAAoD;AAC7E,UAAMN,QAAQ,GAAGJ,eAAe,CAACQ,UAAD,CAAhC;AACA,QAAIG,aAAa,GAAG,EAApB;AAEA,QAAIP,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA2B,OAAOD,aAAP;AAE3BP,IAAAA,QAAQ,CAACS,OAAT,CAAiB,CAACP,KAAD,EAAQQ,KAAR,KAAkB;AACjC,YAAMC,QAAQ,GAAGT,KAAjB;AACA,YAAMU,WAAW,GAAGF,KAAK,KAAKV,QAAQ,CAACQ,MAAT,GAAkB,CAAhD;AACA,YAAMK,eAAe,GAAGP,cAAxB;AAEA,YAAMQ,UAAU,GAAG;AAAEH,QAAAA,QAAF;AAAYC,QAAAA,WAAZ;AAAyBP,QAAAA,kBAAzB;AAA6CQ,QAAAA;AAA7C,OAAnB;AACAN,MAAAA,aAAa,IAAIQ,UAAU,CAACD,UAAD,CAA3B;AACD,KAPD;AASA,WAAOP,aAAP;AACD,GAhBD;;AAkBA,QAAMQ,UAAU,GAAGC,SAAS,IAAI;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAD8B,CAE9B;;AACA,QAAI;AAAEL,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBP,MAAAA,kBAAzB;AAA6CQ,MAAAA;AAA7C,QAAiEG,SAArE;AACAJ,IAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7B;AACAP,IAAAA,kBAAkB,GAAGA,kBAAkB,IAAI,IAA3C;AACAQ,IAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC,CAN8B,CAQ9B;;AACA,UAAMM,WAAW,GAAGd,kBAAkB,GAAGb,KAAH,GAAWC,KAAjD;AACA,UAAM2B,YAAY,GAAGR,WAAW,GAAGjB,KAAH,GAAWD,KAA3C;AACA,UAAM2B,QAAQ,GAAG,QAAQR,eAAR,GAA0BM,WAA1B,GAAwCC,YAAxC,GAAuDT,QAAQ,CAACW,KAAhE,GAAwE,MAAzF,CAX8B,CAa9B;;AACA,UAAMhB,cAAc,GAAGO,eAAe,GAAGM,WAAzC,CAd8B,CAe9B;;AACA,UAAMZ,aAAa,GAAG,EAAtB;AAEA,WAAOA,aAAa,GAAGc,QAAvB;AACD,GAnBD;;AAqBA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAON,UAAU,CAACxB,QAAD,CAAjB,CADF,CADF;AAMD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n\n  // const horPipe = \"─\";\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const getNodeChildren = node => {\n    const nodeEntries = node.entries;\n    const children = nodeEntries.filter(child => {\n      if (child[0] !== \"_name\") return child[1];\n    });\n\n    return children;\n  };\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    const children = getNodeChildren(parentNode);\n    let childrenLines = \"\";\n\n    if (children.length === 0) return childrenLines;\n\n    children.forEach((child, index) => {\n      const treeNode = child;\n      const isLastChild = index === children.length - 1;\n      const inheritedPrefix = prefixToBestow;\n\n      const childInfos = { treeNode, isLastChild, parentWasLastChild, inheritedPrefix };\n      childrenLines += writeLines(childInfos);\n    });\n\n    return childrenLines;\n  };\n\n  const writeLines = nodeInfos => {\n    console.log(nodeInfos)\n    // get writeLines parameters with default values\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = nodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    // write node line\n    const pipeOrBlank = parentWasLastChild ? blank : iPipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n\n    // write children lines if node really has children\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    // const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n    const childrenLines = '';\n\n    return childrenLines + nodeLine;\n  };\n\n  return (\n    <FileTreeContainer>\n      <code>{writeLines(fileTree)}</code>\n      {/* <code>{JSON.stringify(fileTree)}</code> */}\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}