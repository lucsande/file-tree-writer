{"ast":null,"code":"var _jsxFileName = \"/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js\";\nimport React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const {\n    fileTree\n  } = props; // const horPipe = \"─\";\n\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    let childrenLines = \"\";\n    const children = parentNode.entries; // if children has only one entry, its just the node's _name, so it means node doesn't really have children\n\n    if (children.length === 1) return childrenLines;\n    children.forEach((entry, index) => {\n      const key = entry[0];\n      const child = entry[1];\n      const isLastChild = index === children.length - 1;\n\n      if (key !== \"_name\") {\n        childInfos = {\n          treeNode: child,\n          isLastChild,\n          parentWasLastChild,\n          inheritedPrefix: prefixToBestow\n        };\n        childrenLines += writeLines(childInfos);\n      }\n    });\n  };\n\n  const writeLines = treeNodeInfos => {\n    // get writeLines parameters with default values\n    let {\n      treeNode,\n      isLastChild,\n      parentWasLastChild,\n      inheritedPrefix\n    } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\"; // write node line\n\n    const pipeOrBlank = parenWasLastChild ? blank : pipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\"; // write children lines if node really has children\n\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n    return childrenLines + nodeLine;\n  };\n\n  return /*#__PURE__*/React.createElement(FileTreeContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, JSON.stringify(fileTree)));\n}\n\nexport default FileTree;","map":{"version":3,"sources":["/home/lucas/code/lucsande/file-tree-writer/src/components/FileTree/index.js"],"names":["React","useState","FileTreeContainer","FileTree","props","fileTree","blank","iPipe","tPipe","lPipe","writeChildrenLines","parentNode","parentWasLastChild","prefixToBestow","childrenLines","children","entries","length","forEach","entry","index","key","child","isLastChild","childInfos","treeNode","inheritedPrefix","writeLines","treeNodeInfos","pipeOrBlank","parenWasLastChild","pipe","tpipeOrLpipe","nodeLine","_name","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,UAAlC;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CADuB,CAGvB;;AACA,QAAME,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;AACA,QAAMC,KAAK,GAAG,MAAd;;AAEA,QAAMC,kBAAkB,GAAG,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,cAAjC,KAAoD;AAC7E,QAAIC,aAAa,GAAG,EAApB;AACA,UAAMC,QAAQ,GAAGJ,UAAU,CAACK,OAA5B,CAF6E,CAI7E;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B,OAAOH,aAAP;AAE3BC,IAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,YAAMC,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAjB;AACA,YAAMG,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAnB;AACA,YAAMI,WAAW,GAAGH,KAAK,KAAKL,QAAQ,CAACE,MAAT,GAAkB,CAAhD;;AAEA,UAAII,GAAG,KAAK,OAAZ,EAAqB;AACnBG,QAAAA,UAAU,GAAG;AACXC,UAAAA,QAAQ,EAAEH,KADC;AAEXC,UAAAA,WAFW;AAGXX,UAAAA,kBAHW;AAIXc,UAAAA,eAAe,EAAEb;AAJN,SAAb;AAOAC,QAAAA,aAAa,IAAIa,UAAU,CAACH,UAAD,CAA3B;AACD;AACF,KAfD;AAgBD,GAvBD;;AAyBA,QAAMG,UAAU,GAAGC,aAAa,IAAI;AAClC;AACA,QAAI;AAAEH,MAAAA,QAAF;AAAYF,MAAAA,WAAZ;AAAyBX,MAAAA,kBAAzB;AAA6Cc,MAAAA;AAA7C,QAAiEE,aAArE;AACAL,IAAAA,WAAW,GAAGA,WAAW,IAAI,IAA7B;AACAX,IAAAA,kBAAkB,GAAGA,kBAAkB,IAAI,IAA3C;AACAc,IAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC,CALkC,CAOlC;;AACA,UAAMG,WAAW,GAAGC,iBAAiB,GAAGxB,KAAH,GAAWyB,IAAhD;AACA,UAAMC,YAAY,GAAGT,WAAW,GAAGd,KAAH,GAAWD,KAA3C;AACA,UAAMyB,QAAQ,GAAG,QAAQP,eAAR,GAA0BG,WAA1B,GAAwCG,YAAxC,GAAuDP,QAAQ,CAACS,KAAhE,GAAwE,MAAzF,CAVkC,CAYlC;;AACA,UAAMrB,cAAc,GAAGa,eAAe,GAAGG,WAAzC;AACA,UAAMf,aAAa,GAAGJ,kBAAkB,CAACe,QAAD,EAAWF,WAAX,EAAwBV,cAAxB,CAAxC;AAEA,WAAOC,aAAa,GAAGmB,QAAvB;AACD,GAjBD;;AAmBA,sBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAI,CAACC,SAAL,CAAe/B,QAAf,CAAP,CADF,CADF;AAKD;;AAED,eAAeF,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { FileTreeContainer } from \"./styles\";\n\nfunction FileTree(props) {\n  const { fileTree } = props;\n\n  // const horPipe = \"─\";\n  const blank = \"    \";\n  const iPipe = \" |  \";\n  const tPipe = \" ├──\";\n  const lPipe = \" └──\";\n\n  const writeChildrenLines = (parentNode, parentWasLastChild, prefixToBestow) => {\n    let childrenLines = \"\";\n    const children = parentNode.entries;\n\n    // if children has only one entry, its just the node's _name, so it means node doesn't really have children\n    if (children.length === 1) return childrenLines;\n\n    children.forEach((entry, index) => {\n      const key = entry[0];\n      const child = entry[1];\n      const isLastChild = index === children.length - 1;\n\n      if (key !== \"_name\") {\n        childInfos = {\n          treeNode: child,\n          isLastChild,\n          parentWasLastChild,\n          inheritedPrefix: prefixToBestow,\n        };\n\n        childrenLines += writeLines(childInfos);\n      }\n    });\n  };\n\n  const writeLines = treeNodeInfos => {\n    // get writeLines parameters with default values\n    let { treeNode, isLastChild, parentWasLastChild, inheritedPrefix } = treeNodeInfos;\n    isLastChild = isLastChild || true;\n    parentWasLastChild = parentWasLastChild || true;\n    inheritedPrefix = inheritedPrefix || \"\";\n\n    // write node line\n    const pipeOrBlank = parenWasLastChild ? blank : pipe;\n    const tpipeOrLpipe = isLastChild ? lPipe : tPipe;\n    const nodeLine = \"<p>\" + inheritedPrefix + pipeOrBlank + tpipeOrLpipe + treeNode._name + \"</p>\";\n\n    // write children lines if node really has children\n    const prefixToBestow = inheritedPrefix + pipeOrBlank;\n    const childrenLines = writeChildrenLines(treeNode, isLastChild, prefixToBestow);\n\n    return childrenLines + nodeLine;\n  };\n\n  return (\n    <FileTreeContainer>\n      <code>{JSON.stringify(fileTree)}</code>\n    </FileTreeContainer>\n  );\n}\n\nexport default FileTree;\n"]},"metadata":{},"sourceType":"module"}